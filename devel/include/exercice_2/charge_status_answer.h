// Generated by gencpp from file exercice_2/charge_status_answer.msg
// DO NOT EDIT!


#ifndef EXERCICE_2_MESSAGE_CHARGE_STATUS_ANSWER_H
#define EXERCICE_2_MESSAGE_CHARGE_STATUS_ANSWER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace exercice_2
{
template <class ContainerAllocator>
struct charge_status_answer_
{
  typedef charge_status_answer_<ContainerAllocator> Type;

  charge_status_answer_()
    : room_id(0)
    , room_name()
    , status(0)  {
    }
  charge_status_answer_(const ContainerAllocator& _alloc)
    : room_id(0)
    , room_name(_alloc)
    , status(0)  {
  (void)_alloc;
    }



   typedef int32_t _room_id_type;
  _room_id_type room_id;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _room_name_type;
  _room_name_type room_name;

   typedef int32_t _status_type;
  _status_type status;





  typedef boost::shared_ptr< ::exercice_2::charge_status_answer_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::exercice_2::charge_status_answer_<ContainerAllocator> const> ConstPtr;

}; // struct charge_status_answer_

typedef ::exercice_2::charge_status_answer_<std::allocator<void> > charge_status_answer;

typedef boost::shared_ptr< ::exercice_2::charge_status_answer > charge_status_answerPtr;
typedef boost::shared_ptr< ::exercice_2::charge_status_answer const> charge_status_answerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::exercice_2::charge_status_answer_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::exercice_2::charge_status_answer_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::exercice_2::charge_status_answer_<ContainerAllocator1> & lhs, const ::exercice_2::charge_status_answer_<ContainerAllocator2> & rhs)
{
  return lhs.room_id == rhs.room_id &&
    lhs.room_name == rhs.room_name &&
    lhs.status == rhs.status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::exercice_2::charge_status_answer_<ContainerAllocator1> & lhs, const ::exercice_2::charge_status_answer_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace exercice_2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::exercice_2::charge_status_answer_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::exercice_2::charge_status_answer_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercice_2::charge_status_answer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::exercice_2::charge_status_answer_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercice_2::charge_status_answer_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::exercice_2::charge_status_answer_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::exercice_2::charge_status_answer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f216c29efbe9e32fff125752f06801c";
  }

  static const char* value(const ::exercice_2::charge_status_answer_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f216c29efbe9e32ULL;
  static const uint64_t static_value2 = 0xfff125752f06801cULL;
};

template<class ContainerAllocator>
struct DataType< ::exercice_2::charge_status_answer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "exercice_2/charge_status_answer";
  }

  static const char* value(const ::exercice_2::charge_status_answer_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::exercice_2::charge_status_answer_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 room_id\n"
"string room_name\n"
"int32 status\n"
;
  }

  static const char* value(const ::exercice_2::charge_status_answer_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::exercice_2::charge_status_answer_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.room_id);
      stream.next(m.room_name);
      stream.next(m.status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct charge_status_answer_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::exercice_2::charge_status_answer_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::exercice_2::charge_status_answer_<ContainerAllocator>& v)
  {
    s << indent << "room_id: ";
    Printer<int32_t>::stream(s, indent + "  ", v.room_id);
    s << indent << "room_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.room_name);
    s << indent << "status: ";
    Printer<int32_t>::stream(s, indent + "  ", v.status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // EXERCICE_2_MESSAGE_CHARGE_STATUS_ANSWER_H
